const passport = require('passport');
const googleStrategy = require('passport-google-oauth').OAuth2Strategy;
const crypto = require('crypto');
const User = require('../models/user');

//tell passport to use a new strategy for google login
passport.use(new googleStrategy({
    clientID: "1053588864915-d7lecvivebi5rba6cqihm3neic5on3fv.apps.googleusercontent.com",
    clientSecret: "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",
    callbackURL: "http://localhost:8000/users/auth/google/callback",
}, function (accessToken, refreshToken, profile, done) {
    //accessToken is generated by Google, it is  like JWT token
    //refreshToken is for getting new accessToken when accessToken expires 
    // we are asking to establish the identity of the user id that is passed on by the user -> this identity appears in "profile"
    //below we are checking the existence of a user in our DB, with email as the first email from the list of emails in profile obj 
    User.findOne({ email: profile.emails[0].value }).exec(function (err, user) {
        if (err) {
            console.log('Error in google auth', err);
            return;
        }
        // console.log(accessToken, refreshToken);
        // console.log(profile);
        //if this user exists in DB: sign in and set this user as req.user
        if (user) {
            return done(null, user);
        } else {
            //if user dosent exist in DB, create user and set it as req.user,i.e sign in
            User.create({
                name: profile.displayName,
                email: profile.emails[0].value,
                password: crypto.randomBytes(20).toString('hex') //generating random password for user
            }, function (err, user) {
                if (err) {
                    console.log('Error in creating user using google auth', err);
                    return;
                }
                return done(null, user);
            })
        }
    })
}
))

module.exports = passport;